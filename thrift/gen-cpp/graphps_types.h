/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef graphps_TYPES_H
#define graphps_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace graphps {

typedef int64_t ValueDtype;

typedef int64_t MsgDtype;

typedef int32_t DegreeDtype;

class VertexData;

typedef struct _VertexData__isset {
  _VertexData__isset() : value(false), msg(false), indegree(false) {}
  bool value :1;
  bool msg :1;
  bool indegree :1;
} _VertexData__isset;

class VertexData : public virtual ::apache::thrift::TBase {
 public:

  VertexData(const VertexData&);
  VertexData& operator=(const VertexData&);
  VertexData() : value(0), msg(0), indegree(0) {
  }

  virtual ~VertexData() throw();
  ValueDtype value;
  MsgDtype msg;
  DegreeDtype indegree;

  _VertexData__isset __isset;

  void __set_value(const ValueDtype val);

  void __set_msg(const MsgDtype val);

  void __set_indegree(const DegreeDtype val);

  bool operator == (const VertexData & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    if (!(msg == rhs.msg))
      return false;
    if (__isset.indegree != rhs.__isset.indegree)
      return false;
    else if (__isset.indegree && !(indegree == rhs.indegree))
      return false;
    return true;
  }
  bool operator != (const VertexData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VertexData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VertexData &a, VertexData &b);

inline std::ostream& operator<<(std::ostream& out, const VertexData& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
