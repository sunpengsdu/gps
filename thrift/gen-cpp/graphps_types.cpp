/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "graphps_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace graphps {


VertexData::~VertexData() throw() {
}


void VertexData::__set_value(const ValueDtype val) {
  this->value = val;
}

void VertexData::__set_msg(const MsgDtype val) {
  this->msg = val;
}

void VertexData::__set_indegree(const DegreeDtype val) {
  this->indegree = val;
__isset.indegree = true;
}

uint32_t VertexData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->indegree);
          this->__isset.indegree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VertexData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VertexData");

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->msg);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.indegree) {
    xfer += oprot->writeFieldBegin("indegree", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->indegree);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VertexData &a, VertexData &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.msg, b.msg);
  swap(a.indegree, b.indegree);
  swap(a.__isset, b.__isset);
}

VertexData::VertexData(const VertexData& other0) {
  value = other0.value;
  msg = other0.msg;
  indegree = other0.indegree;
  __isset = other0.__isset;
}
VertexData& VertexData::operator=(const VertexData& other1) {
  value = other1.value;
  msg = other1.msg;
  indegree = other1.indegree;
  __isset = other1.__isset;
  return *this;
}
void VertexData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VertexData(";
  out << "value=" << to_string(value);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "indegree="; (__isset.indegree ? (out << to_string(indegree)) : (out << "<null>"));
  out << ")";
}

} // namespace
