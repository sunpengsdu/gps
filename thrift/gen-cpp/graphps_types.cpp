/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "graphps_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace graphps {


ComponentID::~ComponentID() throw() {
}


void ComponentID::__set_minID(const VidDtype val) {
  this->minID = val;
}

void ComponentID::__set_maxID(const VidDtype val) {
  this->maxID = val;
}

uint32_t ComponentID::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minID);
          this->__isset.minID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxID);
          this->__isset.maxID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ComponentID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ComponentID");

  xfer += oprot->writeFieldBegin("minID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->minID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxID", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->maxID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ComponentID &a, ComponentID &b) {
  using ::std::swap;
  swap(a.minID, b.minID);
  swap(a.maxID, b.maxID);
  swap(a.__isset, b.__isset);
}

ComponentID::ComponentID(const ComponentID& other0) {
  minID = other0.minID;
  maxID = other0.maxID;
  __isset = other0.__isset;
}
ComponentID& ComponentID::operator=(const ComponentID& other1) {
  minID = other1.minID;
  maxID = other1.maxID;
  __isset = other1.__isset;
  return *this;
}
void ComponentID::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ComponentID(";
  out << "minID=" << to_string(minID);
  out << ", " << "maxID=" << to_string(maxID);
  out << ")";
}


VertexData::~VertexData() throw() {
}


void VertexData::__set_value(const VvalueDtype val) {
  this->value = val;
}

void VertexData::__set_msg(const VmsgDtype val) {
  this->msg = val;
}

void VertexData::__set_state(const bool val) {
  this->state = val;
}

void VertexData::__set_outdegree(const VdegDtype val) {
  this->outdegree = val;
__isset.outdegree = true;
}

uint32_t VertexData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->outdegree);
          this->__isset.outdegree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VertexData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VertexData");

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->state);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.outdegree) {
    xfer += oprot->writeFieldBegin("outdegree", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->outdegree);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VertexData &a, VertexData &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.msg, b.msg);
  swap(a.state, b.state);
  swap(a.outdegree, b.outdegree);
  swap(a.__isset, b.__isset);
}

VertexData::VertexData(const VertexData& other2) {
  value = other2.value;
  msg = other2.msg;
  state = other2.state;
  outdegree = other2.outdegree;
  __isset = other2.__isset;
}
VertexData& VertexData::operator=(const VertexData& other3) {
  value = other3.value;
  msg = other3.msg;
  state = other3.state;
  outdegree = other3.outdegree;
  __isset = other3.__isset;
  return *this;
}
void VertexData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VertexData(";
  out << "value=" << to_string(value);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "state=" << to_string(state);
  out << ", " << "outdegree="; (__isset.outdegree ? (out << to_string(outdegree)) : (out << "<null>"));
  out << ")";
}

} // namespace
